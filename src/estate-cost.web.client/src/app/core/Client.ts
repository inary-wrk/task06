//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class Client {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
  }

  /**
   * Изменить пул недвижимости.
   * @param body (optional)
   * @return Success
   */
  pool(body: EstateRequest_ChangedEstate[] | undefined): Observable<void> {
    let url_ = this.baseUrl + "/api/estate/pool";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
      })
    };

    return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processPool(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processPool(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processPool(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @return Success
   */
  estate(id: number): Observable<EstateResponse_SingleEstate> {
    let url_ = this.baseUrl + "/api/estate/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processEstate(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processEstate(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<EstateResponse_SingleEstate>;
        }
      } else
        return _observableThrow(response_) as any as Observable<EstateResponse_SingleEstate>;
    }));
  }

  protected processEstate(response: HttpResponseBase): Observable<EstateResponse_SingleEstate> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = EstateResponse_SingleEstate.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * Оценить цену недвижимости учитывая заданные параметры.
   * @param body (optional)
   * @return Success
   */
  evaluate(body: EstateRequest_EvaluateSettings | undefined): Observable<void> {
    let url_ = this.baseUrl + "/api/estate/evaluate";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
      })
    };

    return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processEvaluate(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processEvaluate(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processEvaluate(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * Создать новую сессию.
   * @return Success
   */
  create(): Observable<void> {
    let url_ = this.baseUrl + "/api/sessions/create";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processCreate(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processCreate(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processCreate(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * Получить текущее состояние сессии.
   * @return Success
   */
  state(): Observable<SessionsResponse_Session> {
    let url_ = this.baseUrl + "/api/sessions/state";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processState(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processState(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<SessionsResponse_Session>;
        }
      } else
        return _observableThrow(response_) as any as Observable<SessionsResponse_Session>;
    }));
  }

  protected processState(response: HttpResponseBase): Observable<SessionsResponse_Session> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = SessionsResponse_Session.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * Изменить текущую сессию на заданную sessionId
   * @param sessionId (optional)
   * @return Success
   */
  change(sessionId: number | undefined): Observable<void> {
    let url_ = this.baseUrl + "/api/sessions/change?";
    if (sessionId === null)
      throw new Error("The parameter 'sessionId' cannot be null.");
    else if (sessionId !== undefined)
      url_ += "sessionId=" + encodeURIComponent("" + sessionId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
      })
    };

    return this.http.request("options", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processChange(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processChange(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processChange(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * Возвращает 20 объектов истории сессиий начинающихся после элемента lastId
   * @param lastId (optional)
   * @return Success
   */
  history(lastId: number | undefined): Observable<SessionsResponse_SessionHistoryItem[]> {
    let url_ = this.baseUrl + "/api/sessions/history?";
    if (lastId === null)
      throw new Error("The parameter 'lastId' cannot be null.");
    else if (lastId !== undefined)
      url_ += "lastId=" + encodeURIComponent("" + lastId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processHistory(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processHistory(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<SessionsResponse_SessionHistoryItem[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<SessionsResponse_SessionHistoryItem[]>;
    }));
  }

  protected processHistory(response: HttpResponseBase): Observable<SessionsResponse_SessionHistoryItem[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(SessionsResponse_SessionHistoryItem.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * Загрузка файла с пулом недвижимости.
   * @param file (optional)
   * @return Success
   */
  fileupload(file: FileParameter | undefined): Observable<void> {
    let url_ = this.baseUrl + "/api/sessions/fileupload";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = new FormData();
    if (file === null || file === undefined)
      throw new Error("The parameter 'file' cannot be null.");
    else
      content_.append("file", file.data, file.fileName ? file.fileName : "file");

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processFileupload(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processFileupload(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processFileupload(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }
}

export class EstateRequest_ChangedEstate implements IEstateRequest_ChangedEstate {
  id?: number | undefined;
  estate?: EstateRequest_SingleEstate;
  isDeleted?: boolean;

  constructor(data?: IEstateRequest_ChangedEstate) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.estate = _data["estate"] ? EstateRequest_SingleEstate.fromJS(_data["estate"]) : <any>undefined;
      this.isDeleted = _data["isDeleted"];
    }
  }

  static fromJS(data: any): EstateRequest_ChangedEstate {
    data = typeof data === 'object' ? data : {};
    let result = new EstateRequest_ChangedEstate();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["estate"] = this.estate ? this.estate.toJSON() : <any>undefined;
    data["isDeleted"] = this.isDeleted;
    return data;
  }
}

export interface IEstateRequest_ChangedEstate {
  id?: number | undefined;
  estate?: EstateRequest_SingleEstate;
  isDeleted?: boolean;
}

export class EstateRequest_Correction implements IEstateRequest_Correction {
  haggle?: number;
  area?: number;
  metroDistance?: number;
  floor?: number;
  rooms?: number;
  kitchenArea?: number;
  balcon?: number;
  repairState?: number;

  constructor(data?: IEstateRequest_Correction) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.haggle = _data["haggle"];
      this.area = _data["area"];
      this.metroDistance = _data["metroDistance"];
      this.floor = _data["floor"];
      this.rooms = _data["rooms"];
      this.kitchenArea = _data["kitchenArea"];
      this.balcon = _data["balcon"];
      this.repairState = _data["repairState"];
    }
  }

  static fromJS(data: any): EstateRequest_Correction {
    data = typeof data === 'object' ? data : {};
    let result = new EstateRequest_Correction();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["haggle"] = this.haggle;
    data["area"] = this.area;
    data["metroDistance"] = this.metroDistance;
    data["floor"] = this.floor;
    data["rooms"] = this.rooms;
    data["kitchenArea"] = this.kitchenArea;
    data["balcon"] = this.balcon;
    data["repairState"] = this.repairState;
    return data;
  }
}

export interface IEstateRequest_Correction {
  haggle?: number;
  area?: number;
  metroDistance?: number;
  floor?: number;
  rooms?: number;
  kitchenArea?: number;
  balcon?: number;
  repairState?: number;
}

export class EstateRequest_EvaluateSettings implements IEstateRequest_EvaluateSettings {
  disabledEstateAnalogs?: number[];
  correction?: EstateRequest_Correction;

  constructor(data?: IEstateRequest_EvaluateSettings) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data["disabledEstateAnalogs"])) {
        this.disabledEstateAnalogs = [] as any;
        for (let item of _data["disabledEstateAnalogs"])
          this.disabledEstateAnalogs!.push(item);
      }
      this.correction = _data["correction"] ? EstateRequest_Correction.fromJS(_data["correction"]) : <any>undefined;
    }
  }

  static fromJS(data: any): EstateRequest_EvaluateSettings {
    data = typeof data === 'object' ? data : {};
    let result = new EstateRequest_EvaluateSettings();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.disabledEstateAnalogs)) {
      data["disabledEstateAnalogs"] = [];
      for (let item of this.disabledEstateAnalogs)
        data["disabledEstateAnalogs"].push(item);
    }
    data["correction"] = this.correction ? this.correction.toJSON() : <any>undefined;
    return data;
  }
}

export interface IEstateRequest_EvaluateSettings {
  disabledEstateAnalogs?: number[];
  correction?: EstateRequest_Correction;
}

export class EstateRequest_SingleEstate implements IEstateRequest_SingleEstate {
  location?: string;
  rooms?: number;
  segment?: string;
  houseFloors?: number;
  wallMaterial?: string;
  apartamentFloor?: number;
  apartmentArea?: number;
  kitchenArea?: number;
  balcony?: boolean;
  metroRangeMin?: number;
  decorationState?: string;

  constructor(data?: IEstateRequest_SingleEstate) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.location = _data["location"];
      this.rooms = _data["rooms"];
      this.segment = _data["segment"];
      this.houseFloors = _data["houseFloors"];
      this.wallMaterial = _data["wallMaterial"];
      this.apartamentFloor = _data["apartamentFloor"];
      this.apartmentArea = _data["apartmentArea"];
      this.kitchenArea = _data["kitchenArea"];
      this.balcony = _data["balcony"];
      this.metroRangeMin = _data["metroRangeMin"];
      this.decorationState = _data["decorationState"];
    }
  }

  static fromJS(data: any): EstateRequest_SingleEstate {
    data = typeof data === 'object' ? data : {};
    let result = new EstateRequest_SingleEstate();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["location"] = this.location;
    data["rooms"] = this.rooms;
    data["segment"] = this.segment;
    data["houseFloors"] = this.houseFloors;
    data["wallMaterial"] = this.wallMaterial;
    data["apartamentFloor"] = this.apartamentFloor;
    data["apartmentArea"] = this.apartmentArea;
    data["kitchenArea"] = this.kitchenArea;
    data["balcony"] = this.balcony;
    data["metroRangeMin"] = this.metroRangeMin;
    data["decorationState"] = this.decorationState;
    return data;
  }
}

export interface IEstateRequest_SingleEstate {
  location?: string;
  rooms?: number;
  segment?: string;
  houseFloors?: number;
  wallMaterial?: string;
  apartamentFloor?: number;
  apartmentArea?: number;
  kitchenArea?: number;
  balcony?: boolean;
  metroRangeMin?: number;
  decorationState?: string;
}

export class EstateResponse_SingleEstate implements IEstateResponse_SingleEstate {
  id?: number;
  location?: string;
  rooms?: number;
  segment?: string;
  houseFloors?: number;
  wallMaterial?: string;
  apartamentFloor?: number;
  apartmentArea?: number;
  kitchenArea?: number;
  balcony?: boolean;
  metroRangeMin?: number;
  decorationState?: string;
  coordinates?: SessionsResponse_GeoCode;
  priceRUB?: number;

  constructor(data?: IEstateResponse_SingleEstate) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.location = _data["location"];
      this.rooms = _data["rooms"];
      this.segment = _data["segment"];
      this.houseFloors = _data["houseFloors"];
      this.wallMaterial = _data["wallMaterial"];
      this.apartamentFloor = _data["apartamentFloor"];
      this.apartmentArea = _data["apartmentArea"];
      this.kitchenArea = _data["kitchenArea"];
      this.balcony = _data["balcony"];
      this.metroRangeMin = _data["metroRangeMin"];
      this.decorationState = _data["decorationState"];
      this.coordinates = _data["coordinates"] ? SessionsResponse_GeoCode.fromJS(_data["coordinates"]) : <any>undefined;
      this.priceRUB = _data["priceRUB"];
    }
  }

  static fromJS(data: any): EstateResponse_SingleEstate {
    data = typeof data === 'object' ? data : {};
    let result = new EstateResponse_SingleEstate();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["location"] = this.location;
    data["rooms"] = this.rooms;
    data["segment"] = this.segment;
    data["houseFloors"] = this.houseFloors;
    data["wallMaterial"] = this.wallMaterial;
    data["apartamentFloor"] = this.apartamentFloor;
    data["apartmentArea"] = this.apartmentArea;
    data["kitchenArea"] = this.kitchenArea;
    data["balcony"] = this.balcony;
    data["metroRangeMin"] = this.metroRangeMin;
    data["decorationState"] = this.decorationState;
    data["coordinates"] = this.coordinates ? this.coordinates.toJSON() : <any>undefined;
    data["priceRUB"] = this.priceRUB;
    return data;
  }
}

export interface IEstateResponse_SingleEstate {
  id?: number;
  location?: string;
  rooms?: number;
  segment?: string;
  houseFloors?: number;
  wallMaterial?: string;
  apartamentFloor?: number;
  apartmentArea?: number;
  kitchenArea?: number;
  balcony?: boolean;
  metroRangeMin?: number;
  decorationState?: string;
  coordinates?: SessionsResponse_GeoCode;
  priceRUB?: number;
}

export class SessionsResponse_Correction implements ISessionsResponse_Correction {
  haggle?: number;
  area?: number;
  metroDistance?: number;
  floor?: number;
  rooms?: number;
  kitchenArea?: number;
  balcon?: number;
  repairState?: number;

  constructor(data?: ISessionsResponse_Correction) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.haggle = _data["haggle"];
      this.area = _data["area"];
      this.metroDistance = _data["metroDistance"];
      this.floor = _data["floor"];
      this.rooms = _data["rooms"];
      this.kitchenArea = _data["kitchenArea"];
      this.balcon = _data["balcon"];
      this.repairState = _data["repairState"];
    }
  }

  static fromJS(data: any): SessionsResponse_Correction {
    data = typeof data === 'object' ? data : {};
    let result = new SessionsResponse_Correction();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["haggle"] = this.haggle;
    data["area"] = this.area;
    data["metroDistance"] = this.metroDistance;
    data["floor"] = this.floor;
    data["rooms"] = this.rooms;
    data["kitchenArea"] = this.kitchenArea;
    data["balcon"] = this.balcon;
    data["repairState"] = this.repairState;
    return data;
  }
}

export interface ISessionsResponse_Correction {
  haggle?: number;
  area?: number;
  metroDistance?: number;
  floor?: number;
  rooms?: number;
  kitchenArea?: number;
  balcon?: number;
  repairState?: number;
}

export class SessionsResponse_GeoCode implements ISessionsResponse_GeoCode {
  longitude?: number;
  latitude?: number;

  constructor(data?: ISessionsResponse_GeoCode) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.longitude = _data["longitude"];
      this.latitude = _data["latitude"];
    }
  }

  static fromJS(data: any): SessionsResponse_GeoCode {
    data = typeof data === 'object' ? data : {};
    let result = new SessionsResponse_GeoCode();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["longitude"] = this.longitude;
    data["latitude"] = this.latitude;
    return data;
  }
}

export interface ISessionsResponse_GeoCode {
  longitude?: number;
  latitude?: number;
}

export class SessionsResponse_ReferenceEstate implements ISessionsResponse_ReferenceEstate {
  estate?: SessionsResponse_SingleEstate;
  estateAnalogs?: SessionsResponse_SingleEstate[];

  constructor(data?: ISessionsResponse_ReferenceEstate) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.estate = _data["estate"] ? SessionsResponse_SingleEstate.fromJS(_data["estate"]) : <any>undefined;
      if (Array.isArray(_data["estateAnalogs"])) {
        this.estateAnalogs = [] as any;
        for (let item of _data["estateAnalogs"])
          this.estateAnalogs!.push(SessionsResponse_SingleEstate.fromJS(item));
      }
    }
  }

  static fromJS(data: any): SessionsResponse_ReferenceEstate {
    data = typeof data === 'object' ? data : {};
    let result = new SessionsResponse_ReferenceEstate();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["estate"] = this.estate ? this.estate.toJSON() : <any>undefined;
    if (Array.isArray(this.estateAnalogs)) {
      data["estateAnalogs"] = [];
      for (let item of this.estateAnalogs)
        data["estateAnalogs"].push(item.toJSON());
    }
    return data;
  }
}

export interface ISessionsResponse_ReferenceEstate {
  estate?: SessionsResponse_SingleEstate;
  estateAnalogs?: SessionsResponse_SingleEstate[];
}

export class SessionsResponse_Session implements ISessionsResponse_Session {
  id?: number;
  name?: string;
  created?: Date;
  lastUpdated?: Date;
  correction?: SessionsResponse_Correction;
  estatePool?: SessionsResponse_SingleEstate[];
  referenceEstate?: SessionsResponse_ReferenceEstate;

  constructor(data?: ISessionsResponse_Session) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.name = _data["name"];
      this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
      this.lastUpdated = _data["lastUpdated"] ? new Date(_data["lastUpdated"].toString()) : <any>undefined;
      this.correction = _data["correction"] ? SessionsResponse_Correction.fromJS(_data["correction"]) : <any>undefined;
      if (Array.isArray(_data["estatePool"])) {
        this.estatePool = [] as any;
        for (let item of _data["estatePool"])
          this.estatePool!.push(SessionsResponse_SingleEstate.fromJS(item));
      }
      this.referenceEstate = _data["referenceEstate"] ? SessionsResponse_ReferenceEstate.fromJS(_data["referenceEstate"]) : <any>undefined;
    }
  }

  static fromJS(data: any): SessionsResponse_Session {
    data = typeof data === 'object' ? data : {};
    let result = new SessionsResponse_Session();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    data["created"] = this.created ? this.created.toISOString() : <any>undefined;
    data["lastUpdated"] = this.lastUpdated ? this.lastUpdated.toISOString() : <any>undefined;
    data["correction"] = this.correction ? this.correction.toJSON() : <any>undefined;
    if (Array.isArray(this.estatePool)) {
      data["estatePool"] = [];
      for (let item of this.estatePool)
        data["estatePool"].push(item.toJSON());
    }
    data["referenceEstate"] = this.referenceEstate ? this.referenceEstate.toJSON() : <any>undefined;
    return data;
  }
}

export interface ISessionsResponse_Session {
  id?: number;
  name?: string;
  created?: Date;
  lastUpdated?: Date;
  correction?: SessionsResponse_Correction;
  estatePool?: SessionsResponse_SingleEstate[];
  referenceEstate?: SessionsResponse_ReferenceEstate;
}

export class SessionsResponse_SessionHistoryItem implements ISessionsResponse_SessionHistoryItem {
  id?: number;
  name?: string;
  estateQuntity?: number;
  created?: Date;
  lastUpdated?: Date;

  constructor(data?: ISessionsResponse_SessionHistoryItem) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.name = _data["name"];
      this.estateQuntity = _data["estateQuntity"];
      this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
      this.lastUpdated = _data["lastUpdated"] ? new Date(_data["lastUpdated"].toString()) : <any>undefined;
    }
  }

  static fromJS(data: any): SessionsResponse_SessionHistoryItem {
    data = typeof data === 'object' ? data : {};
    let result = new SessionsResponse_SessionHistoryItem();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    data["estateQuntity"] = this.estateQuntity;
    data["created"] = this.created ? this.created.toISOString() : <any>undefined;
    data["lastUpdated"] = this.lastUpdated ? this.lastUpdated.toISOString() : <any>undefined;
    return data;
  }
}

export interface ISessionsResponse_SessionHistoryItem {
  id?: number;
  name?: string;
  estateQuntity?: number;
  created?: Date;
  lastUpdated?: Date;
}

export class SessionsResponse_SingleEstate implements ISessionsResponse_SingleEstate {
  id?: number;
  location?: string;
  rooms?: number;
  apartamentFloor?: number;
  apartmentArea?: number;
  coordinates?: SessionsResponse_GeoCode;
  priceRUB?: number;

  constructor(data?: ISessionsResponse_SingleEstate) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.location = _data["location"];
      this.rooms = _data["rooms"];
      this.apartamentFloor = _data["apartamentFloor"];
      this.apartmentArea = _data["apartmentArea"];
      this.coordinates = _data["coordinates"] ? SessionsResponse_GeoCode.fromJS(_data["coordinates"]) : <any>undefined;
      this.priceRUB = _data["priceRUB"];
    }
  }

  static fromJS(data: any): SessionsResponse_SingleEstate {
    data = typeof data === 'object' ? data : {};
    let result = new SessionsResponse_SingleEstate();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["location"] = this.location;
    data["rooms"] = this.rooms;
    data["apartamentFloor"] = this.apartamentFloor;
    data["apartmentArea"] = this.apartmentArea;
    data["coordinates"] = this.coordinates ? this.coordinates.toJSON() : <any>undefined;
    data["priceRUB"] = this.priceRUB;
    return data;
  }
}

export interface ISessionsResponse_SingleEstate {
  id?: number;
  location?: string;
  rooms?: number;
  apartamentFloor?: number;
  apartmentArea?: number;
  coordinates?: SessionsResponse_GeoCode;
  priceRUB?: number;
}

export interface FileParameter {
  data: any;
  fileName: string;
}

export class ApiException extends Error {
  override message: string;
  status: number;
  response: string;
  headers: { [key: string]: any; };
  result: any;

  constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
  if (result !== null && result !== undefined)
    return _observableThrow(result);
  else
    return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
  return new Observable<string>((observer: any) => {
    if (!blob) {
      observer.next("");
      observer.complete();
    } else {
      let reader = new FileReader();
      reader.onload = event => {
        observer.next((event.target as any).result);
        observer.complete();
      };
      reader.readAsText(blob);
    }
  });
}
